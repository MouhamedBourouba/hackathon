DSP => ASP => Hospitals

DSP => [ ASP = {Hospitals} ]

hospitals => createDeath/Birth => verification by ASP

Setif doctor token
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTljNjhkZDJiYzY5ZDc5ZTQyOWJmMCIsImlhdCI6MTc0NjUyOTgxOH0.hPxXoKN2cA7Q2bzGTNow0YkSMbR3rntTAAbfQhd_g0I

Oran doctor token
1 --
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTlmNTIyNmU4Mzc1OWRmOWU3NGU3MCIsImlhdCI6MTc0NjUzMjYyN30.MGEPEkRECKW9bCcYbaTjYalqAV4D5a711kRkfVjLiFg

2 --
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTlmOTc2NmU4Mzc1OWRmOWU3NGU5MiIsImlhdCI6MTc0NjUzMjc3MX0.sCW_Ezvq4B9lg1SuA25lZGaa5yZizvjn2zSxgXLBzBg

Oran ASP
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTllYzc3NmU4Mzc1OWRmOWU3NGUyYSIsImlhdCI6MTc0NjUzMTgyMn0.U4dAoNGEgsdTnly1hX9F73rlaHg-5CZyoaQ-2Fpk244

resend api key
re_HqMkfKae_7KyyWfwHEUkBiwG1xdGPbp8r

tobbon token
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MWEyMTAyM2FhODNhNmFmOGY5OTM4MyIsImlhdCI6MTc0NjU0Mjg5M30.i56D6nHKSeQ5jgdRzqghLii_azPP-N4EEXD1PuK32Yo



Front end my frientdddddeee yesssss UIIIIIIIIII:

      <div className="grid grid-cols-1 md:grid-cols-2 gap6 my-4 md:my-6">
        <div className="md:col-span-2">
          <div className="card">
            <div className="flex items-center justify-between">
              <h5 className="text-lg">Recent Records</h5>
            </div>
            <RecordsTable tableData={records} />
          </div>
        </div>
      </div>

const [records, setRecords] = useState([]);

useEffect(() => {
  const birthEventSource = new EventSource('http://localhost:5000/api/eventsBirth');
  birthEventSource.onmessage = (event) => {
    const newEvent = JSON.parse(event.data);
    setRecords(prevEvents => [...prevEvents, newEvent]);
  };
  
  const deathEventSource = new EventSource('http://localhost:5000/api/eventsDeath');
  deathEventSource.onmessage = (event) => {
    const newEvent = JSON.parse(event.data);
    setRecords(prevEvents => [...prevEvents, newEvent]);
  };
  
  const handleError = (err) => {
    console.error("EventSource error:", err);
  };
  
  birthEventSource.onerror = handleError;
  deathEventSource.onerror = handleError;
  
  return () => {
    birthEventSource.close();
    deathEventSource.close();
  };
}, []);

// Fetch all records
useEffect(() => {
  const getAllRecords = async () => {
    try {
      const response = await axoisInstance.get(
        API_PATHS.RECORD.GET_ALL_RECORD
      );
      if (response.data) {
        setRecords(response.data);
      }
    } catch (error) {
      console.error("Error fetching records: ", error);
    }
  };
  
  getAllRecords();
}, []);
